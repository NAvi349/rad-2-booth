$date
	Tue Jul 19 10:04:53 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module booth_rad_tb $end
$var wire 1 ! done $end
$var reg 1 " clk $end
$var reg 16 # data_in [15:0] $end
$var reg 1 $ start $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 16 % data_in [15:0] $end
$var wire 1 $ start $end
$var wire 1 & sftQ $end
$var wire 1 ' sftA $end
$var wire 1 ( qm1 $end
$var wire 1 ) q0 $end
$var wire 1 * ldQ $end
$var wire 1 + ldM $end
$var wire 1 , ldCnt $end
$var wire 1 - ldA $end
$var wire 1 . eqz $end
$var wire 1 ! done $end
$var wire 1 / dec $end
$var wire 1 0 clrff $end
$var wire 1 1 clrQ $end
$var wire 1 2 clrA $end
$var wire 1 3 addsub $end
$scope module bc0 $end
$var wire 1 " clk $end
$var wire 1 $ start $end
$var wire 1 ( qm1 $end
$var wire 1 ) q0 $end
$var wire 1 . eqz $end
$var reg 1 3 addsub $end
$var reg 1 2 clrA $end
$var reg 1 1 clrQ $end
$var reg 1 0 clrff $end
$var reg 1 / decr $end
$var reg 1 ! done $end
$var reg 1 - ldA $end
$var reg 1 + ldM $end
$var reg 1 * ldQ $end
$var reg 1 , ldcnt $end
$var reg 1 ' sftA $end
$var reg 1 & sftQ $end
$var reg 3 4 state [2:0] $end
$upscope $end
$scope module bd0 $end
$var wire 1 3 addsub $end
$var wire 1 " clk $end
$var wire 1 2 clrA $end
$var wire 1 1 clrQ $end
$var wire 1 0 clrff $end
$var wire 16 5 data_in [15:0] $end
$var wire 1 / dec $end
$var wire 1 - ldA $end
$var wire 1 , ldCnt $end
$var wire 1 + ldM $end
$var wire 1 * ldQ $end
$var wire 1 ' sftA $end
$var wire 1 & sftQ $end
$var wire 1 ( qm1 $end
$var wire 1 ) q0 $end
$var wire 1 . eqz $end
$var wire 5 6 count [4:0] $end
$var wire 16 7 Z [15:0] $end
$var wire 16 8 Q [15:0] $end
$var wire 16 9 M [15:0] $end
$var wire 16 : A [15:0] $end
$scope module Areg $end
$var wire 1 " clk $end
$var wire 1 2 clr $end
$var wire 1 - ld $end
$var wire 1 ; s_in $end
$var wire 1 ' sft $end
$var wire 16 < data_in [15:0] $end
$var reg 16 = data_out [15:0] $end
$upscope $end
$scope module Qreg $end
$var wire 1 " clk $end
$var wire 1 1 clr $end
$var wire 16 > data_in [15:0] $end
$var wire 1 * ld $end
$var wire 1 ? s_in $end
$var wire 1 & sft $end
$var reg 16 @ data_out [15:0] $end
$upscope $end
$scope module a0 $end
$var wire 1 3 addsub $end
$var wire 16 A in1 [15:0] $end
$var wire 16 B in2 [15:0] $end
$var reg 16 C out [15:0] $end
$upscope $end
$scope module c0 $end
$var wire 1 " clk $end
$var wire 1 / dec $end
$var wire 1 , ldCnt $end
$var reg 5 D count [4:0] $end
$upscope $end
$scope module d0 $end
$var wire 1 " clk $end
$var wire 1 0 clr $end
$var wire 1 E d $end
$var reg 1 ( q $end
$upscope $end
$scope module mreg $end
$var wire 1 " clk $end
$var wire 16 F data_in [15:0] $end
$var wire 1 + load $end
$var reg 16 G data_out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx G
b0 F
xE
bx D
bx C
bx B
bx A
bx @
x?
b0 >
bx =
bx <
x;
bx :
bx 9
bx 8
bx 7
bx 6
b0 5
bx 4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
b0 %
0$
b0 #
0"
x!
$end
#5
0!
00
0+
0&
0*
11
0'
0-
02
b0 4
1"
#10
0"
#15
0E
0)
b0 8
b0 @
1"
#20
0"
#25
0(
1"
#30
0"
#35
1"
#40
0"
#45
1"
#50
0"
#55
1"
#60
0"
#65
1"
#70
0"
#75
1"
#80
0"
#85
1"
#90
0"
#95
1"
#100
0"
#105
1"
#110
0"
1$
#115
01
1+
1,
10
12
b1 4
1"
#120
0"
b1111111111110110 #
b1111111111110110 %
b1111111111110110 5
b1111111111110110 >
b1111111111110110 F
#125
0?
0;
b1111111111110110 7
b1111111111110110 <
b1111111111110110 C
1*
0+
0,
00
02
b0 :
b0 =
b0 A
b1111111111110110 9
b1111111111110110 B
b1111111111110110 G
0.
b101 6
b101 D
b10 4
1"
#130
0"
b1101 #
b1101 %
b1101 5
b1101 >
b1101 F
#135
1E
1)
b1101 8
b1101 @
1"
#137
b1010 7
b1010 <
b1010 C
0/
0*
03
1-
b100 4
#140
0"
#145
b10100 7
b10100 <
b10100 C
1/
0-
1&
1'
1(
b1010 :
b1010 =
b1010 A
b101 4
1"
#150
0"
#155
0E
0)
b1111 7
b1111 <
b1111 C
1?
b100 6
b100 D
b110 8
b110 @
b101 :
b101 =
b101 A
1"
#157
b1111111111111011 7
b1111111111111011 <
b1111111111111011 C
0/
0&
0'
13
1-
b11 4
#160
0"
#165
b1111111111110001 7
b1111111111110001 <
b1111111111110001 C
1;
1/
0-
1&
1'
0(
b1111111111111011 :
b1111111111111011 =
b1111111111111011 A
b101 4
1"
#170
0"
#175
1E
1)
b1111111111110011 7
b1111111111110011 <
b1111111111110011 C
b11 6
b11 D
b1000000000000011 8
b1000000000000011 @
b1111111111111101 :
b1111111111111101 =
b1111111111111101 A
1"
#177
b111 7
b111 <
b111 C
0/
0&
0'
03
1-
b100 4
#180
0"
#185
b10001 7
b10001 <
b10001 C
0;
1/
0-
1&
1'
1(
b111 :
b111 =
b111 A
b101 4
1"
#190
0"
#195
b1101 7
b1101 <
b1101 C
b10 6
b10 D
b1100000000000001 8
b1100000000000001 @
b11 :
b11 =
b11 A
1"
#200
0"
#205
b1011 7
b1011 <
b1011 C
0E
0)
b1 :
b1 =
b1 A
b1110000000000000 8
b1110000000000000 @
b1 6
b1 D
1"
#207
b1111111111110111 7
b1111111111110111 <
b1111111111110111 C
0/
0&
0'
13
1-
b11 4
#210
0"
#215
b1111111111101101 7
b1111111111101101 <
b1111111111101101 C
1;
1/
0-
1&
1'
b1111111111110111 :
b1111111111110111 =
b1111111111110111 A
0(
b101 4
1"
#220
0"
#225
b1111111111110001 7
b1111111111110001 <
b1111111111110001 C
b1111111111111011 :
b1111111111111011 =
b1111111111111011 A
b1111000000000000 8
b1111000000000000 @
1.
b0 6
b0 D
1"
#227
0/
0&
0'
1!
b110 4
#230
0"
